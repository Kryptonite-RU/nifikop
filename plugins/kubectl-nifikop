#!/usr/bin/env python3
#
# Copyright 2019 Orange
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# 	You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# 	See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import sys
import json
from subprocess import check_output, STDOUT, CalledProcessError
from os.path import basename

K8S_NIFICLUSTER_KIND                = 'nificluster'
K8S_NIFIDATAFLOW_KIND               = 'nifidataflow'
K8S_NIFICONNECTION_KIND             = 'nificonnection'
K8S_NIFINODEGROUPAUTOSCALER_KIND    = 'nifinodegroupautoscaler'
K8S_NIFIPARAMETERCONTEXT_KIND       = 'nifiparametercontext'
K8S_NIFIREGISTRYCLIENT_KIND         = 'nifiregistryclient'
K8S_NIFIUSER_KIND                   = 'nifiuser'
K8S_NIFIUSERGROUP_KIND              = 'nifiusergroup'

K8S_NIFIKOP_GROUP   = 'nifi.konpyutaika.com'
K8S_NIFIKOP_KIND    = [
    K8S_NIFICLUSTER_KIND, K8S_NIFIDATAFLOW_KIND, K8S_NIFICONNECTION_KIND, K8S_NIFINODEGROUPAUTOSCALER_KIND,
    K8S_NIFIPARAMETERCONTEXT_KIND, K8S_NIFIREGISTRYCLIENT_KIND, K8S_NIFIUSER_KIND, K8S_NIFIUSERGROUP_KIND,
]
FORCE_STOP_LABEL    = f'{K8S_NIFIKOP_GROUP}/force-stop'
FORCE_START_LABEL   = f'{K8S_NIFIKOP_GROUP}/force-start'
STOP_INPUT_LABEL    = f'{K8S_NIFIKOP_GROUP}/input-stop'
STOP_OUTPUT_LABEL   = f'{K8S_NIFIKOP_GROUP}/output-stop'

def k(*args):
    params = list(args)
    try:
        out = check_output(['kubectl'] + params, stderr=STDOUT)
        result = out.decode('utf-8')
        if result:
            if '-o' in ' '.join(params):
                return result
            return [r.split() for r in result.split('\n')[1:-1]]
    except CalledProcessError:
        return []

def die(msg):
    print(f'{msg}. Have to stop here ...')
    sys.exit(1)

def get_namespace():
    return k('config', 'view', '--minify', '--output', 'jsonpath={..namespace}') or 'default'

def set_resource_label(resourceKind, resourceName, labelName, labelValue, namespace):
    print(f'Set label {labelName} on {resourceKind} {resourceName} to {labelValue}')
    k('label', resourceKind, resourceName, f'{labelName}={labelValue}', '--overwrite', '-n', namespace)

def unset_resource_label(resourceKind, resourceName, labelName, namespace):
    print(f'Unset label {labelName} on {resourceKind} {resourceName}')
    k('label', resourceKind, resourceName, f'{labelName}-', '-n', namespace)

def get_resources(resourceKind, resourceName, namespace):
    resources = k('get', resourceKind, resourceName, '-n', namespace, '-o', 'json')
    if (len(resources) > 0):
        resources = json.loads(resources)
    else:
        resources = None
    return resources

class Command(object):
    def __init__(self):
        plugin = basename(sys.argv[0])
        parser = argparse.ArgumentParser(
            description='Kubernetes plugin used to trigger operations',
            usage=f'''{plugin} <command> [<args>]
The available commands are:
   stop
   unstop
   start
   unstart
   stop_io
   unstop_io
For more information you can run {plugin} <command> --help
''')
        parser.add_argument('command', help='Subcommand to run')
        args = parser.parse_args(sys.argv[1:2])
        self._command_must_exist(args.command, parser)
        print(f'Default namespace: {get_namespace()}')

        # Call function corresponding to the command passed
        getattr(self, args.command)()

    def _command_must_exist(self, operation, parser):
        if not hasattr(self, operation):
            print(f'Unrecognized operation {operation}')
            parser.print_help()
            exit(1)

    def stop(self):
        self._stop_operation(True)

    def unstop(self):
        self._stop_operation(False)

    def _stop_operation(self, stop):
        parser = argparse.ArgumentParser(f'{"un" if not stop else ""}stop')
        parser.add_argument('type', choices=K8S_NIFIKOP_KIND, help=f'NiFiKop resource type to {"un" if not stop else ""}stop')
        parser.add_argument('name', help=f'NiFiKop resource name to {"un" if not stop else ""}stop')
        parser.add_argument('--namespace', '-n', default=get_namespace())
        args = parser.parse_args(sys.argv[2:])
        type = args.type
        name = args.name
        namespace = args.namespace
        
        resource_json = get_resources(type, name, namespace)
        if resource_json is not None:
            if (stop == True):
                set_resource_label(type, name, FORCE_STOP_LABEL, 'true', namespace)
            else:                
                unset_resource_label(type, name, FORCE_STOP_LABEL, namespace)
        else:
            die(f'The specified resource "{name}" of type "{type}" could not be found in namespace "{namespace}"')
            
    def start(self):
        self._start_operation(True)

    def unstart(self):
        self._start_operation(False)

    def _start_operation(self, start):
        parser = argparse.ArgumentParser(f'{"un" if not start else ""}start')
        parser.add_argument('type', choices=K8S_NIFIKOP_KIND, help=f'NiFiKop resource type to {"un" if not start else ""}start')
        parser.add_argument('name', help=f'NiFiKop resource name to {"un" if not start else ""}start')
        parser.add_argument('--namespace', '-n', default=get_namespace())
        args = parser.parse_args(sys.argv[2:])
        type = args.type
        name = args.name
        namespace = args.namespace
        
        resource_json = get_resources(type, name, namespace)
        if resource_json is not None:
            if (start == True):
                set_resource_label(type, name, FORCE_START_LABEL, 'true', namespace)
            else:                
                unset_resource_label(type, name, FORCE_START_LABEL, namespace)
        else:
            die(f'The specified resource "{name}" of type "{type}" could not be found in namespace "{namespace}"')

    def stop_io(self,):
        parser = argparse.ArgumentParser(self.stop_io.__name__)
        parser.add_argument('type', choices=K8S_NIFIKOP_KIND, help=f'NiFiKop resource type to target')
        parser.add_argument('name', help=f'NiFiKop resource name to target')
        parser.add_argument('componentType', choices=["input", "output"], help=f'Component type to stop')
        parser.add_argument('componentName', help=f'Component name to stop')
        parser.add_argument('--namespace', '-n', default=get_namespace())
        args = parser.parse_args(sys.argv[2:])
        type = args.type
        name = args.name
        componentType = args.componentType
        componentName = args.componentName
        namespace = args.namespace

        resource_json = get_resources(type, name, namespace)
        if resource_json is not None:
            set_resource_label(type, name, STOP_INPUT_LABEL if componentType == "input" else STOP_OUTPUT_LABEL, componentName, namespace)
        else:
            die(f'The specified resource "{name}" of type "{type}" could not be found in namespace "{namespace}"')
            
    def unstop_io(self):
        parser = argparse.ArgumentParser(self.unstop_io.__name__)
        parser.add_argument('type', choices=K8S_NIFIKOP_KIND, help=f'NiFiKop resource type to target')
        parser.add_argument('name', help=f'NiFiKop resource name to target')
        parser.add_argument('componentType', choices=["input", "output"], help=f'Component type to stop')
        parser.add_argument('--namespace', '-n', default=get_namespace())
        args = parser.parse_args(sys.argv[2:])
        type = args.type
        name = args.name
        componentType = args.componentType
        namespace = args.namespace

        resource_json = get_resources(type, name, namespace)
        if resource_json is not None:          
            unset_resource_label(type, name, STOP_INPUT_LABEL if componentType == "input" else STOP_OUTPUT_LABEL, namespace)
        else:
            die(f'The specified resource "{name}" of type "{type}" could not be found in namespace "{namespace}"')
            
if __name__ == '__main__':
    Command()

# sudo cp plugins/kubectl-nifikop /usr/local/bin/kubectl-nifikop && sudo chmod +x /usr/local/bin/kubectl-nifikop